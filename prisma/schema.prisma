// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String    @id     @default(uuid())
  email   String?    @unique
  emailVerified DateTime? @map("email_verified")
  name    String?
  image   String?
  desc    String?   //설명
  rooms   Room[]
  createdAt DateTime @default(now())

  oauth         Boolean?   @default(false) // ✅ 소셜 로그인 유저인지 표시 (커스텀 필드)

  accounts      Account[]  // ✅ NextAuth 관계
  sessions      Session[]  // ✅ NextAuth 관계
}

//룸 (스터디룸, 파티룸, 비엔비룸 등)
model Room {
  id                Int         @id @default(autoincrement())
  title             String
  images            String[]
  address           String
  lat               String                        //위도
  lng               String                        //경도
  category          String
  desc              String
  price             Int
  bedroomDesc       String?                       //숙박가능여부
  freeCancel        Boolean     @default(false)   //무료취소
  officeSpace       Boolean     @default(false)   //사무시설
  hasShower         Boolean     @default(false)   //샴푸 및 욕실 용품
  hasAirCondition   Boolean     @default(false)   //에어컨
  hasWifi           Boolean     @default(false)   //와이파이
  hasFreeParking    Boolean     @default(false)   //무료주차
  userId            String?
  user              User?        @relation(fields: [userId],references: [id], onDelete: Cascade)
  @@index([userId])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt @default(now())
}

model Faq {
  id        Int       @id @default(autoincrement())
  title     String
  desc      String
}

//////////////////////////
// ✅ NextAuth 필수 모델
//////////////////////////

model Account {
  id                        String   @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String?
  refresh_token_expires_in  Int?
  access_token              String?
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?
  session_state             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}